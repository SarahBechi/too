{"version":3,"sources":["to-do-list.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","props","changeHandler","event","setState","inputValue","target","value","addList","list","state","removeItem","i","removeIt","slice","splice","modifyItem","index","newList","filter","item","txt","nList","name","className","type","onChange","this","onClick","map","key","bind","style","textDecoration","val","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PA8FeA,E,YA5FX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAYVC,cAAgB,SAAAC,GAEZ,EAAKC,SAAS,CAAEC,WAAYF,EAAMG,OAAOC,SAf1B,EAmBnBC,QAAU,WACN,EAAKJ,SAAS,CACVK,KAAK,GAAD,mBAAM,EAAKC,MAAMD,MAAjB,CAAuB,CAAE,IAAO,EAAKC,MAAML,WAAY,IAAO,OAAQ,KAAQ,kBArBvE,EA4BnBM,WAAa,SAACC,GACV,IAAMC,EAAW,EAAKH,MAAMD,KAAKK,QACjCD,EAASE,OAAOH,EAAG,GACnB,EAAKR,SAAS,CACVK,KAAMI,KAhCK,EAoCnBG,WAAa,SAACC,GACV,IAAMC,EAAU,EAAKR,MAAMD,KAAKU,QAAO,SAACC,EAAMR,GAC1C,OAAIK,IAAUL,EAAYQ,EAAKC,IAAM,eACvBD,EAAKC,OAMvB,EAAKjB,SAAS,CAAEK,KAAMS,IACtB,IAAMI,EAAQ,EAAKZ,MAAMD,KAAKU,QAAO,SAACC,EAAMR,GACxC,OAAIK,IAAUL,EAAYQ,EAAKG,KAAO,OACxBH,EAAKG,QAIvB,EAAKnB,SAAS,CAAEK,KAAMa,KAlDtB,EAAKZ,MAAQ,CACTD,KAAM,CAAC,CAAE,IAAO,UAAW,IAAO,OAAQ,KAAQ,cAClDJ,WAAY,IAJD,E,sEAyDT,IAAD,OAEL,OAAQ,6BAEJ,yBAAKmB,UAAU,aACX,0BAAMA,UAAU,SAAhB,cACA,0BAAMA,UAAU,eAAhB,iBACA,2BAAOC,KAAK,OAAOD,UAAU,aAAaE,SAAUC,KAAKzB,gBACzD,0BAAMsB,UAAU,UAAUI,QAASD,KAAKnB,SAAxC,SAEJ,yBAAKgB,UAAU,iBACX,0BAAMA,UAAU,iBAAhB,6BACA,wBAAIA,UAAU,UACd,yBAAKA,UAAU,SACX,yBAAKA,UAAU,cACVG,KAAKjB,MAAMD,KAAKoB,KAAI,SAACT,EAAMR,GAAP,OAAa,yBAAKkB,IAAKlB,GAExC,0BAAMY,UAAU,eAAeI,QAAS,EAAKZ,WAAWe,KAAK,EAAMnB,IAAMQ,EAAKG,MAC9E,0BAAMC,UAAU,YAAYI,QAAS,EAAKjB,WAAWoB,KAAK,EAAMnB,IAAhE,UACA,0BAAMY,UAAU,WAAWQ,MAAO,CAAEC,eAAgBb,EAAKC,MAASD,EAAKc,iB,GA7E5EC,aCYRC,MARf,WACE,OAEE,kBAAC,EAAD,OCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c42362ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass ToDoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: [{ \"val\": \"exemple\", \"txt\": \"none\", \"name\": \"compelete\" }],\r\n            inputValue: \"\",\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    changeHandler = event => {\r\n\r\n        this.setState({ inputValue: event.target.value });\r\n    }\r\n\r\n\r\n    addList = () => {\r\n        this.setState({\r\n            list: [...this.state.list, { \"val\": this.state.inputValue, \"txt\": \"none\", \"name\": \"compelete\" }]\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    removeItem = (i) => {\r\n        const removeIt = this.state.list.slice();\r\n        removeIt.splice(i, 1);\r\n        this.setState({\r\n            list: removeIt\r\n        })\r\n    }\r\n\r\n    modifyItem = (index) => {\r\n        const newList = this.state.list.filter((item, i) => {\r\n            if (index === i) { return item.txt = \"line-through\" }\r\n            else { return item.txt }\r\n        }\r\n\r\n        )\r\n\r\n\r\n        this.setState({ list: newList })\r\n        const nList = this.state.list.filter((item, i) => {\r\n            if (index === i) { return item.name = \"undo\" }\r\n            else { return item.name }\r\n        }\r\n\r\n        )\r\n        this.setState({ list: nList })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (<div>\r\n\r\n            <div className=\"to-do-app\">\r\n                <span className=\"to-do\">To-Do App!</span>\r\n                <span className=\"new-element\">Add New To-Do</span>\r\n                <input type=\"text\" className=\"enter-task\" onChange={this.changeHandler}></input>\r\n                <span className=\"add-btn\" onClick={this.addList} >Add </span>\r\n            </div>\r\n            <div className=\"get-work-done\">\r\n                <span className=\"get-work-done\">Let's get some work done!</span>\r\n                <hr className=\"ligne\"></hr>\r\n                <div className=\"tasks\">\r\n                    <div className=\"items_list\">\r\n                        {this.state.list.map((item, i) => <div key={i}>\r\n\r\n                            <span className=\"compeleteBtn\" onClick={this.modifyItem.bind(this, i)} >{item.name}</span>\r\n                            <span className=\"deleteBtn\" onClick={this.removeItem.bind(this, i)}>Delete</span>\r\n                            <span className=\"theInput\" style={{ textDecoration: item.txt }} >{item.val}</span>\r\n                        </div>)}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDoList;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport ToDoList from './to-do-list';\n\n\nfunction App() {\n  return (\n\n    <ToDoList />\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}